name: KSA OSRM Build and Push Images

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Select environment'
        required: true
        default: 'stg'
        type: choice
        options:
          - stg
          - prod

env:  
  #############################
  ############ KSA ############
  #############################

  # Staging environment variables
  PATH_STG_KSA: 'environments/stg/osrm/ksa'
  ECR_REPOSITORY_STG: 'ziyad-ksa-stg/os-osrm-backend'
  NAMESPACE_STG: 'vroom-osrm-stg'

  # Production environment variables
  PATH_PROD_KSA: 'environments/prod/osrm/ksa'
  ECR_REPOSITORY_PROD: 'ziyad-ksa-prod/os-osrm-backend'
  NAMESPACE_PROD: 'vroom-osrm-prod'

  # Common variables
  IMAGE_TAG_KSA: 'ksa-latest-debug'
  OSM_FILE: 'gcc-states-latest.osm.pbf'
  OSM_URL: 'http://download.geofabrik.de/asia/gcc-states-latest.osm.pbf'

jobs:
  KSA-Build-and-Push-Images-Update-Image-Tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # with:
        #   token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        shell: bash
        run: |
          if [ "${{ github.event.inputs.env }}" = "prod" ]; then
            echo "ECR_REPOSITORY=${ECR_REPOSITORY_PROD}" >> $GITHUB_ENV
            echo "NAMESPACE=${NAMESPACE_PROD}" >> $GITHUB_ENV
            echo "PATH_KSA=${PATH_PROD_KSA}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "EKS_CLUSTER=${{ secrets.EKS_CLUSTER_PROD }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.env }}" = "stg" ]; then
            echo "ECR_REPOSITORY=${ECR_REPOSITORY_STG}" >> $GITHUB_ENV
            echo "NAMESPACE=${NAMESPACE_STG}" >> $GITHUB_ENV
            echo "PATH_KSA=${PATH_STG_KSA}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
            echo "EKS_CLUSTER=${{ secrets.EKS_CLUSTER_STG }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=stg" >> $GITHUB_ENV
          else
            echo "Invalid environment!"
            exit 1
          fi

      # Check OSM file last modified date to detect updates
      - name: Get OSM file last modified date
        id: osm-version
        run: |
          # Get the Last-Modified header from the OSM file URL
          LAST_MODIFIED=$(curl -sI "${{ env.OSM_URL }}" | grep -i "last-modified" | cut -d' ' -f2- | tr -d '\r\n')
          if [ -z "$LAST_MODIFIED" ]; then
            # Fallback: use current date if header not available
            LAST_MODIFIED=$(date -u +"%Y-%m-%d")
          fi
          echo "OSM_LAST_MODIFIED=$LAST_MODIFIED" >> $GITHUB_ENV
          echo "osm-version=$LAST_MODIFIED" >> $GITHUB_OUTPUT
          echo "üîç OSM file last modified: $LAST_MODIFIED"

      # Cache OSM data file with version detection
      - name: Cache OSM data
        id: cache-osm
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PATH_KSA }}/${{ env.OSM_FILE }}
            ${{ env.PATH_KSA }}/gcc-states-latest.osrm*
          key: ${{ runner.os }}-osm-data-ksa-${{ hashFiles('**/Dockerfile') }}-${{ env.OSM_FILE }}-${{ steps.osm-version.outputs.osm-version }}
          restore-keys: |
            ${{ runner.os }}-osm-data-ksa-${{ env.OSM_FILE }}-

      # Download OSM data only if not cached or if source updated
      - name: Download OSM data (if not cached or updated)
        if: steps.cache-osm.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.PATH_KSA }}
          echo "üì• Downloading latest OSM data..."
          wget -c ${{ env.OSM_URL }} -O ${{ env.OSM_FILE }}
          echo "‚úÖ OSM data downloaded successfully"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Cache Docker layers using local cache
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-buildx-ksa-${{ github.event.inputs.env }}-${{ hashFiles('**/Dockerfile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ksa-${{ github.event.inputs.env }}-${{ hashFiles('**/Dockerfile') }}-
            ${{ runner.os }}-buildx-ksa-${{ github.event.inputs.env }}-

      - name: Build and push KSA docker image to Amazon ECR with optimized cache
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FULL_IMAGE_TAG: ${{ env.IMAGE_TAG_KSA }}-${{ github.sha }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.PATH_KSA }}
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.FULL_IMAGE_TAG }}
          # Multiple cache sources for maximum efficiency
          cache-from: |
            type=local,src=${{ runner.temp }}/.buildx-cache
            type=gha,scope=ksa-${{ github.event.inputs.env }}
            type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: |
            type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max
            type=gha,mode=max,scope=ksa-${{ github.event.inputs.env }}
            type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max
          platforms: linux/amd64
          # Enable BuildKit features for better caching
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Move cache to prevent size growth (workaround for buildkit issue)
      - name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Log KSA build completion
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FULL_IMAGE_TAG: ${{ env.IMAGE_TAG_KSA }}-${{ github.sha }}
        run: |
          echo "üèóÔ∏è KSA OSRM-${{ env.ENVIRONMENT }} Docker image build completed"
          echo "üìÇ Build context: ${{ env.PATH_KSA }}"
          echo "‚úÖ Successfully built and pushed KSA image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.FULL_IMAGE_TAG }}"
          echo "üåç Environment: ${{ env.ENVIRONMENT }}"
          echo "üì¶ Namespace: ${{ env.NAMESPACE }}"
          echo "‚ö° Build time optimized with multi-layer caching"
          if [ "${{ steps.cache-osm.outputs.cache-hit }}" = "true" ]; then
            echo "üéØ OSM data cache hit - saved significant download time!"
          else
            echo "üì• OSM data downloaded - will be cached for next build"
          fi
          echo "üîÑ OSM file version: ${{ env.OSM_LAST_MODIFIED }}"
